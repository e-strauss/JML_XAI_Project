var documenterSearchIndex = {"docs":
[{"location":"lime/#LIME","page":"Lime","title":"LIME","text":"","category":"section"},{"location":"lime/","page":"Lime","title":"Lime","text":"Because LIME is a \"Local Interpretable Model-agnostic Explanations\" (LIME) you can use it for any model. In addition to the model to be explained, you need a specific input x.","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"For our example we use a pre-trained LeNet5 model (model.bson) and a data point of the MNIST dataset for x.","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"using ExplainableAI\nusing Flux\nusing BSON\nusing JML_XAI_Project\nusing CSV\nusing DataFrames\nusing XAIBase\nusing Images\n\n#our input x\ndf = CSV.read(\"../MNIST_input_9.csv\", DataFrame)\nx = Matrix(df)\ny = 9\n\ninput = reshape(x, 28, 28, 1, :);\ninput_rgb = repeat(input, 1, 1, 3, 1)\n\n#our model\nmodel = BSON.load(\"../model.bson\", @__MODULE__)[:model]\n","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"Now we are using the XAIBase template to generate an explanaition","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"struct LIME{M} <: AbstractXAIMethod \n    model::M    \nend\n\nfunction (method::LIME)(input, output_selector::AbstractOutputSelector)\n    output = method.model(input)\n    output_selection = output_selector(output)\n\n    val = rand(size(input)...) #it doesn't implement LIME yet\n    extras = nothing  # TODO: optionally add additional information using a named tuple\n    return Explanation(val, output, output_selection, :MyMethod, :attribution, extras)\nend","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"In the next step we call the XAIBase's analyze function to compute the LIME explanation.","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"analyzer = LIME(model)\nexpl = analyze(input, analyzer);","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"To visualize the explanaition we create a heatmap","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"using VisionHeatmaps\nheatmap(expl.val)","category":"page"},{"location":"lime/","page":"Lime","title":"Lime","text":"note: Note\nAs you can see, the heatmap is quite noisy. This is because the XAIBase tamplate is still generating a random output. We still have to implement the LIME algoithm. But if you want to have a first impression of the LIME code structure, have a look at our source code. ","category":"page"},{"location":"shap/#SHAP","page":"SHAP","title":"SHAP","text":"","category":"section"},{"location":"shap/","page":"SHAP","title":"SHAP","text":"...to be implemented","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = JML_XAI_Project","category":"page"},{"location":"#JML*XAI*Project-LIME-and-SHAP-for-Julia","page":"Home","title":"JMLXAIProject - LIME and SHAP for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements the explainable AI methods LIME and SHAP using XAIBase.jl. JMLXAIproject provides explanations for image and text input and is visualized as a heatmap.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use the package please add the following code to your environment","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/e-strauss/JML_XAI_Project.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for JMLXAIProject.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JML_XAI_Project]","category":"page"}]
}
